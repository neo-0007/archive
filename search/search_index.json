{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Archive","text":"<p>Hi! I'm a Computer Science student with interest in robotics, artificial intelligence, and backend systems. This site is a collection of my projects, experiments, technical notes, and learnings.</p>"},{"location":"#documented-projects","title":"Documented Projects","text":"<ul> <li>Robosoccer Bot</li> <li>Quadcopter</li> </ul>"},{"location":"#socials","title":"Socials","text":"<ul> <li>GitHub: github.com/neo-0007 </li> <li>LinkedIn: linkedin.com/in/hrishiii </li> <li>Email: <code>hrishikeshgohain123@gmail.com</code></li> </ul>"},{"location":"algo/","title":"Algorithms","text":""},{"location":"common/motors/","title":"Motors 101","text":"<p>Understanding motors was one of the first things we had to get comfortable with while building our RoboSoccer bot. We knew we needed torque \u2014 but what does that actually mean? How do you choose the right motor? What\u2019s the deal with all the gears?</p> <p>This page breaks it down simply.</p>"},{"location":"common/motors/#torque-and-speed","title":"Torque and Speed","text":"<p>For our use ,the two things that mattered the most were : torque and speed (RPM).</p> <ul> <li>Torque is the twisting force a motor can apply. Think of it as how hard the motor can push or pull.</li> <li>RPM (Revolutions Per Minute) is how fast the motor spins.</li> </ul> <p>These two are inversely proprtional , higher speed usually means lower torque and vice versa. That\u2019s why we use gears (more on that later).</p> <p>Pushing the ball it a lot more easier than pushing another robot therefore torque is more important than speed. Our bot doesn\u2019t need to zoom across the arena since its a small one \u2014 it needs to push hard and hold its ground.</p>"},{"location":"common/motors/#types-of-motors-we-explored","title":"Types of Motors We Explored","text":""},{"location":"common/motors/#dc-geared-motors","title":"DC Geared Motors","text":"<ul> <li>Simple brushed DC motors with a gear system attached</li> <li>Easy to use and control</li> <li>Available in many RPM and torque options</li> </ul>"},{"location":"common/motors/#brushless-motors-bldc","title":"Brushless Motors (BLDC)","text":"<ul> <li>Super fast and efficient</li> <li>Used in drones and high-speed robots</li> <li>Require advanced drivers and control logic (ESCs)</li> </ul>"},{"location":"common/motors/#what-are-gears-doing-in-a-motor","title":"What Are Gears Doing in a Motor?","text":"<p>If you've seen a motor with a big metal can at the front, that's usually the gearbox.</p> <p></p> <p>Gears allow us to reduce speed and increase torque. The motor itself spins fast but doesn\u2019t have much force. Adding gears reduces the RPM but massively increases the torque.</p> <p>Without gears, the motor would just spin fast and stall the moment it touched the ground or a ball.</p>"},{"location":"common/motors/#types-of-gear-systems","title":"Types of Gear Systems","text":""},{"location":"common/motors/#1-spur-gearbox","title":"1. Spur Gearbox","text":"<ul> <li>Simple gear system</li> <li>Gears are in a line</li> <li>Cheaper but not very compact</li> <li>Moderate torque</li> </ul>"},{"location":"common/motors/#2-worm-gearbox","title":"2. Worm Gearbox","text":"<ul> <li>Good torque</li> <li>Self-locking (doesn\u2019t rotate backward)</li> <li>Less efficient and bulky</li> </ul>"},{"location":"common/motors/#3-planetary-gearbox-our-choice","title":"3. Planetary Gearbox (our choice)","text":"<ul> <li>Compact and powerful</li> <li>High torque with small size</li> <li>Gears rotate around a central gear like planets \u2014 hence the name</li> <li>Slightly more expensive, but worth it for performance</li> </ul>"},{"location":"common/motors/#choosing-the-right-motor","title":"Choosing the Right Motor","text":"<p>Some rules of thumb we followed:</p> <ul> <li>Look for torque first, especially if you\u2019re pushing something</li> <li>Pick RPM depending on arena size (too fast = hard to control)</li> <li>Prefer metal gear motors over plastic ones</li> <li>Go with planetary geared motors if budget allows</li> </ul> <p>In our case, we chose 12V 300 RPM IG32 motors with a planetary gearbox \u2014 great torque, sturdy, and within budget.</p>"},{"location":"common/motors/#more-to-learn","title":"More to Learn","text":"<p>We\u2019re still learning about motors, drivers, and control systems. In the future, we\u2019d like to try: - Encoders for measuring speed and distance - Brushless motors with smart ESCs - Autonomous control with PID or closed-loop feedback</p> <p>That\u2019s it for motors! Hope this helps if you're starting out.</p>"},{"location":"ds/","title":"Data Structures","text":"<p>I see a computer as a bunch of memory blocks(Memory module) and a super fast compute machine(Processing module) that can do all kind of simple maths and logical operations like addition, multiplications, OR, AND  etc in a super super fast manner.</p> <p>It is us the humans who programms a computer to utilize the memory blocks to do preety cleaver stuff.</p> <p>We try to organize and store the data like numbers, characters etc in preety smart ways in those memory blocks, and they are called data structures, these data structures are than used by algorithms to do very smart calculations.</p> <p>Therefore, I believe that data structures are the foundation of computer science, because they define how data is represented and accessed, which in turn determines how effectively any computation can be carried out.</p> <p>And every program we use , even the colors you see on the computer screen , the music you hear coming through the speakers , the mouse cursor that moves whe you move the mouse are all just computations done by the computer.</p> <p>Everything in a computer is a result of clever data manipulation and fast computation \u2014 no magic, just math and logic.</p>"},{"location":"maze-solver/components/","title":"Micromouse Components List","text":"<p>Note: This is just a Draft Document </p>"},{"location":"maze-solver/components/#1-microcontroller","title":"1. Microcontroller","text":"<ul> <li>STM32F401CC   ARM Cortex-M4, sufficient GPIOs, timers, and communication interfaces     Alternatives: STM32F103C8T6, STM32G431CB, STM32F446RE</li> </ul>"},{"location":"maze-solver/components/#2-motors","title":"2. Motors","text":"<ul> <li>N20 Micro Metal Geared DC Motors (500\u2013600 RPM) with encoders Buy Link</li> </ul>"},{"location":"maze-solver/components/#3-motor-drivers","title":"3. Motor Drivers","text":"<ul> <li>DRV8833, DRV8880, or TB6612FNG </li> </ul>"},{"location":"maze-solver/components/#4-wall-sensors-ir","title":"4. Wall Sensors (IR)","text":"<ul> <li>IR Transmitter: SFH 4045N  </li> <li>IR Receiver Options: </li> <li>BPV11F  </li> <li>TEFT4300  </li> <li>SFH 309FA  </li> <li>BPW34</li> </ul>"},{"location":"maze-solver/components/#5-distance-sensors-advanved","title":"5. Distance Sensors (Advanved)","text":"<ul> <li>ToF Sensor (e.g., VL53L0X or VL6180X) </li> </ul>"},{"location":"maze-solver/components/#6-battery","title":"6. Battery","text":"<ul> <li>2S LiPo Battery (7.4V, 500\u20131000 mAh)  </li> </ul>"},{"location":"maze-solver/components/#7-voltage-regulator","title":"7. Voltage Regulator","text":"<ul> <li>5V Regulator Module (AMS1117) </li> <li>Buck Converter (Step-Down DC-DC) </li> </ul>"},{"location":"maze-solver/components/#8-imu-sensor-advanved","title":"8. IMU Sensor (Advanved)","text":"<ul> <li>MPU6050 (Gyroscope + Accelerometer)  </li> </ul>"},{"location":"maze-solver/components/#9-wheels","title":"9. Wheels","text":"<ul> <li>Wheel and Tyre Combo: P-2235 (RoboJunkies)  </li> <li>OR custom 3D-printed wheels   Compatible with N20 motors</li> </ul>"},{"location":"quadcopter/","title":"Overview","text":""},{"location":"quadcopter/#introduction","title":"Introduction","text":"<p>A drone is a unmanned aerial vechicle (UAV) , a vechicle that flies and has no humans in it , you can say it as a remote controlled plane in simple terms </p> <p>These are the most common types of drones we normally use :</p> <p></p> <p>Image source: An Overview of Drone Applications in the Construction Industry</p> <p>All of these are just different types of designs used for different purposes , their main goal is to fly.</p>"},{"location":"quadcopter/#quadcopters","title":"Quadcopters","text":"<p>Quadcopter is a type of drone and as its name suggests it uses quad(four) rotors (or motors) to fly . These spinning propellers let the quadcopter fly, hover, turn, and move in any direction. </p> <p>Quadcopters come in various types, distinguished mainly by their frame shapes and intended uses, here are the different types of frame shapes :</p> <p>Image source: Quadcopter Drones: A Comprehensive Beginner\u2019s Guide</p> <p>The most common quadcopter that you may have seen or used are DJI drones : </p> <p>Image source: DJI Mini 3</p> <p>And this is what our quadcopter looks like  </p>"},{"location":"quadcopter/#how-does-a-quadcopter-fly","title":"How does a Quadcopter Fly","text":"<p>Newton\u2019s Third Law says:</p> <p>\u201cFor every action, there is an equal and opposite reaction.\u201d</p> <p>This means that whenever one object pushes on another, the second object pushes back with the same force, but in the opposite direction.</p> <p>When a quadcopter\u2019s propellers spin, they push air downward. Using Newton\u2019s third law, this represents the action. For Newton\u2019s law to be true, there must be an equal and opposite reaction. This reaction is an upward force pushing on the quadcopter. Once this force exceeds the force of gravity pulling the quadcopter downward, the quadcopte begins to move up. </p> <p>Image source: NASA</p> <p>Well this is only up and down motion , but a quadcopter can turn and move in any direction and can do flips also , how does it do that ?</p>"},{"location":"quadcopter/#movements-of-a-quadcopter","title":"Movements of a Quadcopter","text":"<p>The three fundamental movements are up &amp; down (vertical movement) , left &amp; right and front &amp; back(lateral movement) and round and round (rotational movement)</p> <p>Image source: NASA</p> <p>All of these movements can be achieved by varying the speed of the 4 rotors in different ways.</p> <p>When the propellers spin, they push air down. Similar to a helicopter, pushing the air down is the action in Newton\u2019s third law of motion. The reaction is a force, called lift, which pushes the quadcopter up. Each of the propellers will create lift, and the total lift for the quadcopter will be the sum of the four propellers\u2019 lifts. The total force of the lift must be stronger than the force of gravity for the quadcopter to take off. Once in the air, the quadcopter can hover with no vertical movement by having the forces of lift and gravity equal.</p> <p>Image source: NASA</p> <p>When the force of lift acts straight upward, the quadcopter moves vertically. But, when lift acts at an angle, it can also move laterally. This is because part of the force of the lift is upward and part of it is to the side, resulting in lateral movement that can be from side-to-side or forward and backward. </p> <p>Image source: NASA</p> <p>Lateral movement occurs by varying the speed of the propellers. Increasing the speed of the two propellers on one side of the quadcopter and/or decreasing the speed of the two propellers on the other side creates uneven amounts of lift on the two sides. The lift created on the side with the faster spinning propellers is greater than the lift created on the opposite side. The result is that the quadcopter moves in the direction of the side where less lift is created.</p> <p>Here are all the movements using lateral movement :</p> <p>Image source: Mastering the Art of Drone Maneuvers: Exploring Lateral Movements and Rotations</p> <p>And the last type of movement is rotational motion , how does the quadcopter rotates in its own axis ? for that lets learn about the oreantations of the rotors of a quadcopter.</p> <p>Image Source: Ardupilot</p> <p>As you can see in the above image , Rotor 3 and 4 rotates in Clockwise direction and Rotor 1 and 2 rotates in Anticlockwise direction.</p> <p>This is done due to a force called torque , a twisting force that causes rotation When a propeller spins, this force is produced. And, according to Newton\u2019s third law of motion, an equal and opposite force is produced as well.</p> <p>Image Source: Air transportation safety investigation report A20A0027</p> <p>We see this in action when we look at a helicopter like the one above. When the blades on top of the helicopter (the rotor) spin, torque is created. The equal and opposite force rotates the body of the helicopter in the opposite direction of the blades\u2019 rotation. Since this would make the helicopter unusable, a tail rotor is added. It creates a force that counteracts the torque and stops the helicopter from rotating uncontrollably</p> <p>Torque also affects a quadcopter when its propellers spin because each propeller individually creates torque when it rotates. All four torques are added up to determine  the total torque acting on the quadcopter, If all propellers spins in same direction , the quadcopter body would have been rotating in the opposite direction .Therefore Engineers have come up with a clever way of counteracting this torque\u2014two of the propellers spin clockwise and two spin counterclockwise,. This results in two propellers creating torque that acts clockwise and two creating torque that acts counterclockwise. Thus, the forces cancel each other out.</p> <p>This torque can also be used to create rotational movement for the quadcopter.In the above shown image When propellers 1 and 3 rotate, they produce counterclockwise torque(remember, equal and opposite reactions). If these propellers rotate faster than propellers 2 and 4, the counterclockwise torque acting on the quadcopter will be  stronger than the clockwise torque acting on it. This results in the quadcopter rotating counterclockwise. Of course, if propellers 2 and 4 rotate faster than  propellers 1 and 3, the quadcopter will rotate clockwise.</p> <p>Image source: Mastering the Art of Drone Maneuvers: Exploring Lateral Movements and Rotations</p>"},{"location":"quadcopter/#the-propellers","title":"The Propellers","text":"<p>While having pairs of propellers rotating in opposite directions effectively controls the torque acting on the quadcopter, it presents a new problem for us. If propellers spin in opposite directions, two of the propellers push air upward while two push air downward. When you combine these forces, the total lift is zero and the quadcopter cannot take off. To overcome this, we use two different propeller blades.</p> <p>Image Source: Ardupilot</p> <p>In above image, you can see that the leftmost propeller has the right edge higher in the front while the other has the left edge higher. This design changes the direction the air is pushed by the two propellers, meaning that when they spin in opposite directions, they actually push the air in the same direction.</p> <p>This was a brief overview of what quadcopters are and how does they work.</p>"},{"location":"quadcopter/#references","title":"References","text":"<ol> <li>The Science behind quadcopters - NASA</li> <li>Quadcopter classification - T-drones</li> <li>Quadcopter Movements - Holystone</li> <li>Wikipedia</li> </ol>"},{"location":"quadcopter/anatomy/","title":"Anatomy of a Quadcopter","text":"<p>A Quadcopter is build out of various mechanical and electrical components , that works together to make it fly. These components can be of various types or specifications which you may select , below are all the basic components of a quadcopter.</p> <p></p>"},{"location":"random/dual-boot-wifi-issue/","title":"Fixing Intel AX200 Wi-Fi Not Working on Ubuntu (Dual Boot with Windows)","text":"<p>Recently, I faced an annoying issue after booting into Ubuntu which was running alongside Windows(dual boot) on my ASUS VivoBook 14 (Model: M413IA) .My Wifi was not working , i switched to Windows and it worked just fine. MyWifi card is Intel Wi-Fi 6 AX200 card.</p> <p>After a lot of digging, debugging, and trial-and-error, I figured out the root cause and fixed it. This post documents that journey, in case anyone else is facing the same issue.</p> <p>The Symptoms :</p> <p>In Ubuntu, running:</p> <p><pre><code>nmcli device\n</code></pre> The output <pre><code>DEVICE           TYPE      STATE                   CONNECTION         \nenxca89f39a6d94  ethernet  connected               Wired connection 1 \nlo               loopback  connected (externally)  lo                 \ndocker0          bridge    connected (externally)  docker0\n</code></pre> Wi-Fi was completely missing.</p> <p>Then I checked the network hardware:</p> <pre><code>sudo lshw -C network\n</code></pre> <p>The output: <pre><code>*-network UNCLAIMED\n   description: Network controller\n   product: Intel Corporation Wi-Fi 6 AX200\n</code></pre> The device was \"unclaimed\" \u2014 a clear sign that the kernel recognized it, but no driver was managing it.</p> <p>The Error in Logs</p> <p>To get more detail, I ran:</p> <p><code>dmesg | grep iwlwifi</code> It showed <pre><code>iwlwifi 0000:01:00.0: probe with driver iwlwifi failed with error -110\n</code></pre></p> <p><code>error -110</code> typically points to a timeout, meaning the device isn\u2019t responding correctly during initialization.</p> <p>What Didn\u2019t Work</p> <p>I tried a lot of common fixes: - Reinstalling <code>linux-firmware</code> - Manually loading the <code>iwlwifi</code> module with <code>modprobe</code> - Setting GRUB options like <code>pcie_aspm=off</code> and <code>pci=nomsi</code> - Updating initramfs - Checking <code>rfkill</code> (nothing was blocked) - Enabling Network Stack in BIOS - Disabling Secure Boot and Fast Boot</p> <p>None of these worked.</p> <p>The Real Cause: Windows Fast Startup</p> <p>Eventually, I booted back into Windows to double-check if the card was functional. It was. This confirmed that the hardware wasn\u2019t faulty.</p> <p>Then I remembered that Windows Fast Startup sometimes causes devices to be left in a low-power or suspended state \u2014 especially Wi-Fi and Bluetooth cards.</p> <p>This was the key.</p> <p>The Fix That Worked</p> <p>Here\u2019s exactly what I did:</p> <ol> <li>Booted into Windows</li> <li>Went to Control Panel \u2192 Power Options \u2192 Choose what the power buttons do</li> <li>Clicked \u201cChange settings that are currently unavailable\u201d</li> <li>Disabled: Turn on fast startup (recommended) <code>remember: turn this off</code></li> <li>Performed a full shutdown (Shift + Shutdown)</li> <li>Booted into Ubuntu</li> </ol> <p>Now, the Wi-Fi card is detected properly:'</p> <p><code>nmcli device</code></p> <p><code>wlp1s0  wifi      disconnected  --</code></p> <p>And no more <code>probe failed with error -110</code> in <code>dmesg</code>.</p> <p>Summary</p> <p>If your Intel AX200 card isn\u2019t working on Ubuntu and you're dual-booting with Windows, disable Fast Startup in Windows and fully power off the system. The card will reset, and Linux will be able to initialize it properly.</p> <p>It\u2019s a frustrating issue, but once you know the cause, the fix is pretty simple.</p>"},{"location":"random/free-unlimited-cloud-storage/","title":"Freemium Hacking: Rotating Cloud Storage Accounts for Educational Purposes","text":"<p>Recently, while I was building a project, I needed a cloud storage provider to store images, videos, etc. \u2014 basically a SaaS product. I had a \u20b90 budget for the project, so I needed a service with a free tier. Luckily, there are lots of them out there...</p> <p>Here is a comparison of various providers</p> Provider Free Storage Free Bandwidth File Size Limit Notable Limits / Notes Amazon S3 5 GB 15 GB/month 5 GB 20,000 GET &amp; 2,000 PUT requests/month Cloudinary 25 Credits/month 25 GB bandwidth/month 100 MB (images, videos) 25 GB total storage included Firebase Storage 1 GB 5 GB/month 2 GB 50K read, 20K write operations/day Supabase 1 GB 2 GB/month ~50 MB (browser upload) File size capped by browser or CDN ImageKit 20 GB 20 GB/month 25 MB (browser), 100 MB (API) 500 transformations/day limit Uploadcare 1.5 GB 1 GB/month 100 MB 300 file uploads/month Backblaze B2 10 GB 1 GB/day download No hard limit 2,500 downloads/day <p>I decided to use Cloudinary for my project because it offered a decent free tier with generous bandwidth and transformation limits. But then I noticed something interesting \u2014 all you need to sign up is a Gmail address.</p> <p>So... why not just create multiple Gmail accounts and keep rotating them? Each new account gives you another free tier allowance. You can imagine the potential: 10 Gmail accounts \u2192 10 Cloudinary accounts \u2192 10\u00d7 the free limit. For a mid-scale application, this setup could be sufficient.</p> <p>Here is the logic:</p> <pre><code>flowchart LR\n    A[User uploads image] --&gt; B[API receives image]\n    B --&gt; C{Select Cloudinary account}\n\n    C --&gt;|1st Upload| D1[Cloudinary Account 1]\n    C --&gt;|2nd Upload| D2[Cloudinary Account 2]\n    C --&gt;|3rd Upload| D3[Cloudinary Account 3]\n    C --&gt;|4th Upload| D1\n    C --&gt;|5th Upload| D2\n    C --&gt;|...| E[Repeat in Round-Robin]\n\n    D1 --&gt; F1[Upload Success]\n    D2 --&gt; F2[Upload Success]\n    D3 --&gt; F3[Upload Success]</code></pre> <p>I created a demo application using Node.js and Express to demonstrate this (I do not intend to use it in production \u2014 and you shouldn't either \u2014 it's just for educational purposes):</p> <p>The code can be found in my github repo abuse-the-free-tier</p>"},{"location":"random/free-unlimited-cloud-storage/#code-explanation","title":"Code Explanation","text":"<p>Folder Structure:</p> <pre><code>.\n\u251c\u2500\u2500 uploads/                         # Temp directory for incoming files before upload\n\u251c\u2500\u2500 views/\n\u2502   \u2514\u2500\u2500 upload.ejs                   # HTML template for upload form\n\u251c\u2500\u2500 cloudinaryAccounts.example.json # Example credentials file\n\u251c\u2500\u2500 cloudinaryAccounts.json         # Actual Cloudinary account credentials (add your accounts)\n\u251c\u2500\u2500 cloudinary.js                   # Upload logic with account rotation\n\u251c\u2500\u2500 index.js                        # Main server logic (Express)\n\u251c\u2500\u2500 package.json                    # Node project dependencies and scripts\n\u251c\u2500\u2500 package-lock.json               # Dependency lock file\n\u2514\u2500\u2500 README.md                       # Project description\n</code></pre> <p>I will just explain the main parts here :</p> <p>The <code>cloudinaryAccounts.json</code> contains the api keys and secrets and that is not safe but its for demonstration purposes , we can easily make them as environment variables and inject them using packages like dotenv.</p>"},{"location":"random/free-unlimited-cloud-storage/#cloudinaryjs-round-robin-upload-logic","title":"cloudinary.js \u2014 Round-Robin Upload Logic","text":"<p>Handles:</p> <ol> <li>Account rotation via <code>currentIndex % accounts.length</code></li> <li>Configuring Cloudinary SDK per request</li> <li>Uploading file to the selected Cloudinary account</li> </ol> <pre><code>const cloudinary = require(\"cloudinary\").v2;\nconst accounts = require(\"./cloudinaryAccounts.json\");\n</code></pre> <p>We\u2019re importing Cloudinary\u2019s SDK to interact with their API. Also importing our cloudinaryAccounts.json file which contains all the account credentials.</p> <p>Before this works, make sure to install Cloudinary using: <code>npm install cloudinary</code></p> <pre><code>let currentIndex = 0;\n\nfunction getNextAccount() {\n  const account = accounts[currentIndex % accounts.length];\n  currentIndex++;\n  return account;\n}\n</code></pre> <p>We\u2019re using a simple trick called modulo (%) to loop through the accounts in a round-robin fashion. currentIndex % accounts.length ensures we never go out of bounds. Each time we upload, currentIndex++ moves us to the next account. Once it reaches the end, it circles back to the first one.</p> <pre><code>async function uploadImage(filePath) {\n  const account = getNextAccount();\n  cloudinary.config(account);\n\n  try {\n    const result = await cloudinary.uploader.upload(filePath);\n    return result;\n  } catch (error) {\n    console.error(\"Upload failed:\", error);\n    throw error;\n  }\n}\n</code></pre> <p>This is a example upload function:</p> <ol> <li>Gets the next account using our round-robin method.</li> <li>Sets that account as the active Cloudinary config.</li> <li>Uploads the file at filePath.</li> <li>Returns the Cloudinary response with url, public_id, etc.</li> </ol> <p><pre><code>module.exports = uploadImage;\n</code></pre> We export uploadImage so we can use it in other files (like index.js).</p>"},{"location":"random/free-unlimited-cloud-storage/#conclusion","title":"Conclusion","text":"<p>This is just for cloud object storage , most of the SaaS products can be exploited in this way , even anything that uses API keys and has a free tier. So Is there a way  to prevent this ? so that software companies can make more money .</p>"},{"location":"random/install-and-setup-opengl-dev-environment/","title":"Install and Setup OpenGL Developer Environment","text":"<p>Directly go to Installation</p>"},{"location":"random/install-and-setup-opengl-dev-environment/#what-is-opengl","title":"What is OpenGL","text":"<p>Before we start the setup process and understand what OpenGL is and what the other components are that we need to start development using OpenGL:</p> <p>So we all know about graphics cards or GPUs. All modern-day computers have a GPU. You may not have a big powerful NVIDIA or AMD GPU, but there is always a GPU, like an integrated GPU in the CPU. Here is an image of a expensive dedicated GPU:</p> <p>Their main goal is to do calculations in parallel. As we know, we have a CPU that may have a few cores \u2014 say 6 \u2014 so it can run 6 tasks in parallel. You may say you can run more than 6 applications at a time, but they are not using the CPU at the same time. Your OS handles who gets to do their work when, and it\u2019s pretty efficient at that. But tasks like 3D rendering, simulations, linear algebra calculations require many tasks to be solved in a small amount of time.</p> <p>Say you are running a game at 100 FPS \u2014 that means 100 frames to be rendered per second. That can't be done by a CPU in such a small amount of time. There comes the GPU \u2014 it can do thousands of simple calculations in parallel. So that's a brief about GPUs.</p> <p>Now, say you want to make a game. First, you want to make a character \u2014 say Iron Man \u2014 and you want to use the GPU to render (draw on the screen) the character for you. So how will you use the GPU?</p> <p>In the early days, people needed to write different code for different GPUs. You can think of this code as the ISA (assembly) of CPUs \u2014 they are different for different CPU architectures. Now, that is not good. So, Silicon Graphics \u2014 a company \u2014 came up with OpenGL, which abstracted the low-level stuff and gave a common interface or an API (you can think of it as a library like you import in C, like stdlib.h, and use functions like printf). These functions can just be called in our code, and the rest is handled by them.</p> <p>So OpenGL provides us with such platform-independent functions which we can use to utilize the GPU and draw something on the screen, as it is a graphics library.</p> <pre><code>flowchart TD\n    A[Game/App Code] --&gt; B[OpenGL API]\n    B --&gt; C[GLU/GLM - Utility Libraries]\n    B --&gt; D[GLUT/FreeGLUT - Window &amp; Input Handling]\n    B --&gt; E[Graphics Driver]\n    E --&gt; F[GPU Hardware]\n    F --&gt; G[Display Monitor]</code></pre> <p>Now, OpenGL can just render things, but it needs a window (think of it as the portion of the screen where the application is shown) to render these pixels. Also, OpenGL does not manage inputs like mouse, keyboard, etc. So we need something else to manage this. There come these helper libraries (they are also a set of code written by someone to make our lives easier), like GLUT, FreeGLUT, etc.</p> <p>GLUT is no longer supported and maintained, and it was proprietary software. So we can use FreeGLUT, which is its open-source alternative. Of course, there are lots of them out there.</p>"},{"location":"random/install-and-setup-opengl-dev-environment/#requirements","title":"Requirements","text":"<ul> <li>A Code Editor     This is to write your code , you can use any like VS Code , CodeBlocks, Vim , Text Editor also :)</li> <li>OpenGL     This is already installed in all computers ,This is the  OpenGL runtime \u2014 the driver and the actual GPU implementation of OpenGL</li> <li>OpenGL Development Headers &amp; Libraries     These are the header files .h that has the function declarations and all which you import in your code using #include , and their actual implementation is alreay done by the GPU providers or OS , but to access them we need a interface , that will be used by our code which are these libraries they are of different formats in different OS , .lib, .dll in WIndows , .so in Linux and .framework in MacOS</li> <li>FreeGLUT     for creating windows and handling input as explained above</li> <li>GCC or any compiler like Clang etc.     To Compile your written code to machine executable (.exe, .out etc)</li> </ul> <p>These are all the components we need to start our development independent of our OS , but their installation process is different in different OS </p>"},{"location":"random/install-and-setup-opengl-dev-environment/#installation-guide","title":"Installation guide","text":"<p>Go to Windows</p> <p>Go to MacOS</p>"},{"location":"random/install-and-setup-opengl-dev-environment/#linux","title":"Linux","text":"<p>Here is a Video tutorial if you dont like to read. Just copy the commands from below and paste them like i did , I had already installed them but if you have not installed them it will take some time for you.</p>    Your browser does not support the video tag.  <p>1. Get any code editor you want or use any existing one.</p> <p>In Code::Blocks, the OpenGL Project template already sets up the libraries, so no extra linking flags are needed. This is a big advantage over VS Code. but i was only able to make it work for linux .</p> <p>To use codeblocks:</p> <ul> <li>Open a Terminal</li> <li>Run <code>sudo apt install codeblocks</code></li> <li>This will install the codeblocks ide</li> <li>Open it </li> </ul> <p>Congrats you have successfully installed Codeblocks</p> <p>Or you can use VS Code if you already have it.. or Vim or Nodepad etc..</p> <p>2. Install Build Essentials (Compiler, Make, etc.) </p> <p>Run <code>sudo apt install build-essential</code></p> <p>This installs:</p> <ul> <li>g++ (C++ compiler)</li> <li>make (optional but useful)</li> <li>libstdc++ and other development tools</li> </ul> <p>3. Install OpenGL + FreeGLUT Development Libraries</p> <p>Run <code>sudo apt install freeglut3-dev libglu1-mesa-dev libglew-dev libgl1-mesa-dev</code></p> <p>This installs:</p> <ul> <li>freeglut3-dev \u2013 FreeGLUT headers and linker files</li> <li>libglu1-mesa-dev \u2013 GLU (OpenGL Utility Library)</li> <li>libgl1-mesa-dev \u2013 Core OpenGL library (software renderer if no GPU driver)</li> <li>libglew-dev \u2013 (optional) for more modern OpenGL</li> </ul> <p>Now you are good to go...</p> <p>4. How to write, compile and run the code</p> <p>Below is a example code</p> <pre><code>#include &lt;GL/freeglut.h&gt;  // Use FreeGLUT header (cross-platform)\n\n// Display callback function\nvoid display() {\n    glClear(GL_COLOR_BUFFER_BIT); // Clear the screen\n\n    glBegin(GL_POLYGON); // Draw a triangle\n\n    glColor3f(1.0f, 0.0f, 0.0f);  // Red\n    glVertex3f(-0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 1.0f, 0.0f);  // Green\n    glVertex3f(0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 0.0f, 1.0f);  // Blue\n    glVertex3f(0.0f, 0.75f, 0.0f);\n\n    glEnd();\n\n    glFlush(); // Execute drawing commands\n}\n\nint main(int argc, char** argv) {\n    glutInit(&amp;argc, argv);                             // Initialize GLUT\n    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);       // Single buffer, RGB color\n    glutInitWindowSize(500, 500);                      // Window size\n    glutInitWindowPosition(100, 100);                  // Window position\n    glutCreateWindow(\"FreeGLUT Triangle Example\");     // Create window\n\n    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);               // Set background color to black\n\n    glutDisplayFunc(display);                          // Register display callback\n    glutMainLoop();                                    // Start the main loop\n\n    return 0;\n}\n</code></pre> <p>CodeBlocks: Its easiest here</p> <ul> <li>Open Codeblocks</li> <li>Go to File-&gt;New-&gt;Project</li> <li>Scroll and select OpenGL Project</li> <li>Follow the remaining steps</li> <li>Write your code</li> <li>To build/compile the code In toolbar press Build than again Build</li> <li>Than to run the code Go to Build-&gt;Run</li> </ul> <p>VS Code: </p> <p>Here is a video tutorial of how to use VS Code after installing everything</p>    Your browser does not support the video tag.  <ul> <li>Open VS Code open a folder , create a c++ file</li> <li>Write your code</li> <li>Open terminal if not opened use Ctrl+` inside vs code</li> <li>make sure you are in the same path as the file</li> <li>Run <code>g++ filename.cpp -o outputname -lglut -lGLU -lGL</code></li> <li>This will compile your code</li> <li>Now run <code>./outputname</code> to run the program</li> </ul> <p>OR if you want to avoid typing the long command everytime you can just configure a tasks.json file</p> <ul> <li>Press <code>Ctrl+Shift+P</code> inside VS Code (or just create one FOlder name .vscode and a tasks.json file inside it)</li> <li>Search tasks.json </li> <li>Open It</li> <li>Pate the following inside it</li> </ul> <p><pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Build OpenGL App\",\n      \"type\": \"shell\",\n      \"command\": \"g++\",\n      \"args\": [\n        \"${file}\",                         \n        \"-o\", \"${fileBasenameNoExtension}\", \n\n        // Linux\n        \"-lglut\",\n        \"-lGLU\",\n        \"-lGL\"\n\n        // --- macOS (uncomment if using system GLUT) ---\n        // \"-framework\", \"OpenGL\",\n        // \"-framework\", \"GLUT\"\n\n        // --- Windows (uncomment if using MinGW or MSYS2) ---\n        // \"-lfreeglut\",\n        // \"-lopengl32\",\n        // \"-lglu32\"\n      ],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"detail\": \"Builds the current C++ OpenGL/FreeGLUT file\"\n    }\n  ]\n}\n</code></pre> - Now to compile/build you can just enter <code>Ctrl+Shift+B</code> - Than run the program by typing <code>./filename</code> in terminal</p> <p>You successfully compiled and ran your first application using OpenGL</p>"},{"location":"random/install-and-setup-opengl-dev-environment/#windows","title":"Windows","text":"<p>Windows (MSYS2 and VS Code Method)</p> <p>Here is a Video tutorial if you dont like to read, Some of the commands were little different in video , they are correct in this article now , so you can directly copy and paste them.</p>    Your browser does not support the video tag.  <p>Install MSYS2</p> <ul> <li>Go to the official MSYS2 website: https://www.msys2.org/</li> <li>Download the installer.</li> <li>Run the installer and follow the setup as shown in the website.</li> </ul> <p>At the end,type <code>pacman -Syu</code> in the terminal (automatically opened one). If it closes after updating, open the MSYS2 terminal again and continue.</p> <p>Install Compiler and Build Tools</p> <ul> <li>Open the MSYS2 MINGW64 terminal and run: <pre><code>pacman -S mingw-w64-x86_64-toolchain\n</code></pre></li> <li>Slect the option 3 (gcc at the end)</li> </ul> <p>This installs:</p> <ul> <li>g++ (C++ compiler)</li> </ul> <p>Install OpenGL + FreeGLUT Development Libraries</p> <p>In the same MINGW64 terminal, run:</p> <pre><code>pacman -S mingw-w64-x86_64-freeglut \n</code></pre> <p>This installs:</p> <ul> <li>mingw-w64-x86_64-freeglut \u2013 FreeGLUT headers and libraries</li> </ul> <p>Add MinGW to your PATH</p> <ul> <li>Find where MSYS2 is installed (default: C:\\msys64)</li> <li>Copy the path to bin (default is <code>C:\\msys64\\mingw64\\bin</code>)</li> <li>Add this to your Windows System Environment Variables<ul> <li>Open Searchbar and search for Environment Variables</li> <li>Environment Varibles -&gt; System Variables -&gt; Path -&gt; Edit</li> <li>Add the path to the bin of mingw64 <code>C:\\msys64\\mingw64\\bin</code></li> <li>Press Ok in all 3 windows</li> </ul> </li> </ul> <p>Now you can run g++ from any terminal (PowerShell, CMD, etc.), not just MSYS2.</p> <p>Write, Compile, and Run the Code</p> <p>Below is the same example code from Linux (works the same):</p> <pre><code>#include &lt;GL/freeglut.h&gt;  // Use FreeGLUT header (cross-platform)\n\nvoid display() {\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    glBegin(GL_POLYGON);\n\n    glColor3f(1.0f, 0.0f, 0.0f);\n    glVertex3f(-0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 1.0f, 0.0f);\n    glVertex3f(0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 0.0f, 1.0f);\n    glVertex3f(0.0f, 0.75f, 0.0f);\n\n    glEnd();\n\n    glFlush();\n}\n\nint main(int argc, char** argv) {\n    glutInit(&amp;argc, argv);\n    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);\n    glutInitWindowSize(500, 500);\n    glutInitWindowPosition(100, 100);\n    glutCreateWindow(\"FreeGLUT Triangle Example\");\n\n    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n\n    glutDisplayFunc(display);\n    glutMainLoop();\n\n    return 0;\n}\n</code></pre> <p>VS Code :</p> <ul> <li>Open VS Code.</li> <li>Create a .cpp file in your workspace.</li> <li>Open a terminal in VS Code (Ctrl+`).</li> <li>Make sure you\u2019re in the MSYS2 MINGW64 environment (you can launch VS Code from MINGW64 terminal using code . to ensure correct paths).</li> </ul> <p>Compile using:</p> <pre><code>g++ filename.cpp -o outputname -lfreeglut -lopengl32 -lglu32\n</code></pre> <p>Run the program: <pre><code>./outputname\n</code></pre> IF you dont want to type the long command everytime to build you can configure it (kind of a shortcut)</p> <ul> <li>create a folder in the root named .vscode</li> <li>create a tasks.json inside the folder</li> <li>paste the below given lines in it</li> <li>After this is done you can compile/build the code using <code>Ctrl+Shift+B</code></li> <li>After Compilation you can run the code in same way as before by running <code>./outputname</code> in the terminal</li> </ul> <p>tasks.json for Windows (MSYS2)</p> <pre><code>{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Build OpenGL App (Windows MSYS2)\",\n      \"type\": \"shell\",\n      \"command\": \"g++\",\n      \"args\": [\n        \"${file}\",\n        \"-o\", \"${fileBasenameNoExtension}\",\n        \"-lfreeglut\",\n        \"-lopengl32\",\n        \"-lglu32\"\n      ],\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"problemMatcher\": [\"$gcc\"],\n      \"detail\": \"Builds the current C++ OpenGL/FreeGLUT file for Windows MSYS2\"\n    }\n  ]\n}\n</code></pre>"},{"location":"random/install-and-setup-opengl-dev-environment/#macos","title":"MacOS","text":"<p>OpenGL Development Setup on macOS</p> <p>Install Requirements</p> <p>macOS already includes the OpenGL.framework and GLUT.framework as part of the system SDK \u2014 no extra libraries are needed.</p> <p>However, you must have Apple\u2019s compiler and headers installed via Xcode Command Line Tools.</p> <p>Install Xcode Command Line Tools In Terminal, run:</p> <pre><code>xcode-select --install\n</code></pre> <p>Follow the prompts to download and install. This gives you:</p> <ul> <li>clang++ compiler</li> <li>OpenGL and GLUT headers</li> <li>System SDK frameworks</li> </ul> <p>Create a Simple OpenGL Program Create a file main.cpp:</p> <p>for every program using opengl you need to add this libs for macos : <code>#include &lt;OpenGL/gl.h&gt; #include &lt;GLUT/glut.h&gt;</code></p> <p>Below is a test code you can copy</p> <pre><code>#include &lt;OpenGL/gl.h&gt;\n#include &lt;GLUT/glut.h&gt;\n\nvoid display() {\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    glBegin(GL_POLYGON);\n\n    glColor3f(1.0f, 0.0f, 0.0f);\n    glVertex3f(-0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 1.0f, 0.0f);\n    glVertex3f(0.6f, -0.75f, 0.0f);\n\n    glColor3f(0.0f, 0.0f, 1.0f);\n    glVertex3f(0.0f, 0.75f, 0.0f);\n\n    glEnd();\n\n    glFlush();\n}\n\nint main(int argc, char** argv) {\n    glutInit(&amp;argc, argv);\n    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);\n    glutInitWindowSize(500, 500);\n    glutInitWindowPosition(100, 100);\n    glutCreateWindow(\"FreeGLUT Triangle Example\");\n\n    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);\n\n    glutDisplayFunc(display);\n    glutMainLoop();\n\n    return 0;\n}\n</code></pre> <p>Compile</p> <p>For Apple Silicon M1,M2 etc (arm64): </p> <pre><code>clang++ *.cpp -o app \\\n  -framework OpenGL -framework GLUT \\\n  -DGL_SILENCE_DEPRECATION -arch arm64\n</code></pre> <p>For Intel Macs (x86_64):</p> <pre><code>clang++ *.cpp -o app \\\n  -framework OpenGL -framework GLUT \\\n  -DGL_SILENCE_DEPRECATION -arch x86_64\n</code></pre> <p>Run</p> <pre><code>./app\n\n# replace with the name you had given\n</code></pre> <p>A 500\u00d7500 window should appear with a black background.</p> <p>VS Code Build Task (Optional)</p> <p>Create .vscode/tasks.json in your project folder:</p> <p>Paste the below given congig in it </p> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Build OpenGL App\",\n            \"type\": \"shell\",\n            \"command\": \"clang++\",\n            \"args\": [\n                \"*.cpp\",\n                \"-o\", \"app\",\n                \"-framework\", \"OpenGL\",\n                \"-framework\", \"GLUT\",\n                \"-DGL_SILENCE_DEPRECATION\",\n                \"-arch\", \"arm64\"\n            ],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            },\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"problemMatcher\": [\"$gcc\"]\n        }\n    ]\n}\n</code></pre> <p>Now press Cmd + Shift + B to build.</p> <p>Notes</p> <ul> <li>OpenGL and GLUT are deprecated in macOS but still work.</li> <li>-DGL_SILENCE_DEPRECATION removes deprecation warnings.</li> <li>No extra installs are needed beyond Xcode Command Line Tools.</li> </ul>"},{"location":"random/simple-python-venv-manager/","title":"A Simple Python venv Manager","text":"<p>Recently, while working on multiple Python projects, I faced some problems with how scattered my virtual environments were. Some were in the project folders, some outside, and I couldn\u2019t remember which ones were important and which ones I could delete.</p> <p>There are great tools like Anaconda, Mamba, Poetry, etc. \u2014 but they are heavy and come with more features than I needed. I just wanted something lightweight. Something that uses Python's own built-in <code>venv</code> and lets me keep everything in one place. And I think if you're just hacking on side projects, scripts, or learning Python \u2014 these tools might feel like overkill.</p> <p>So I wrote venvman \u2014 a tiny Bash script to create, activate, delete, and list Python virtual environments. You can find the project on GitHub here.</p> <p>I didn\u2019t need dependency resolution or Python version management. I just wanted: - A centralized place for all venvs (no more searching in random project folders) - A simple CLI command like <code>venvman create myproject</code> - Quick activation from anywhere in the terminal - Easy cleanup of unused venvs</p> <p>That\u2019s it. And I wanted it in one script \u2014 no dependencies, no config files, just pure Bash.</p>"},{"location":"random/simple-python-venv-manager/#what-does-venvman-do","title":"What does venvman do?","text":"<p>Once installed, it gives you these commands:</p> <pre><code>venvman create &lt;name&gt;     # Create a new virtual environment\nvactivate &lt;name&gt;          # Activate an existing environment\nvdeactivate &lt;name&gt;        # Deactivate the current venv\nvenvman list              # See all venvs\nvenvman delete &lt;name&gt;     # Delete a venv you don\u2019t need anymore\n</code></pre> <p>It stores all environments under <code>~/.venvs/</code></p> <p>So now I can do: <pre><code>venvman create testapi\nvactivate testapi\n</code></pre></p>"},{"location":"random/simple-python-venv-manager/#limitations","title":"Limitations","text":"<p>This is not a replacement for Anaconda, Mamba, or Poetry. It does not: - Manage Python versions (you\u2019ll need <code>pyenv</code> or something similar for that) - Handle <code>requirements.txt</code> or <code>pyproject.toml</code> - Install any packages for you It simply wraps the standard <code>python3 -m venv</code> and gives you CLI access to keep it all clean and centralized. Right now, it only works on Linux or Bash-compatible shells. If you're on macOS (which defaults to <code>zsh</code>) or Windows (CMD or PowerShell), it won\u2019t run without tweaks. But \u2014 if you want to help port it, raise a PR.</p>"},{"location":"random/simple-python-venv-manager/#installation","title":"Installation","text":"<p>Clone the repo and run the setup: <pre><code>git clone https://github.com/neo-0007/venvman.git\ncd venvman\nbash setup.sh\n</code></pre> This adds the <code>venvman</code> command globally (via <code>~/bin</code>) and appends a function + alias to your <code>.bashrc</code>.</p> <p>To uninstall: <pre><code>bash uninstall.sh\n</code></pre></p> <p>Fork it. Hack it. Improve it. That\u2019s the fun part :)</p>"},{"location":"robosoccer/","title":"RoboSoccer Overview","text":"<p>Our first robotics project was our RoboSoccer bot. It\u2019s not a human like robot playing soccer with robotic legs \u2014 it\u2019s a simple RC-controlled, four-wheeled bot (you can think of it as a small car) that pushes the ball toward the goal. Matches are usually 1v1.</p>"},{"location":"robosoccer/#the-bot","title":"The Bot","text":"<p>Here is our first build. I think it looked pretty good \u2014 but unfortunately, it broke during its very first match. :(</p> <p>Here is our V2. I don\u2019t have a great photo of it, and it doesn\u2019t look better than V1 \u2014 but it managed to score a few goals and lasted until the end. It was a good improvement!</p> <p>Here are some images of bots from other teams. They are much more advanced and built by teams with way more experience than us.</p> <p>More about the bot in the next pages...</p>"},{"location":"robosoccer/#the-arena","title":"The Arena","text":"<p>This is what an arena looks like. It\u2019s about 2.5m by 2m in size.</p>"},{"location":"robosoccer/#the-game","title":"The Game","text":"<p>The objective of the game is the same as in regular football: score goals. The team that scores the most goals wins the match.</p> <p>Here is a clip from one of our games. As you can see, it\u2019s more like sumo wrestling than football!</p>    Your browser does not support the video tag.  <p>Here are links to some games that are much better than ours:</p> <ul> <li>Game 1</li> <li>Game 2</li> <li>Game 3</li> </ul>"},{"location":"robosoccer/bot/","title":"The Robot","text":""},{"location":"robosoccer/bot/#introduction","title":"Introduction","text":"<p>Here is a dissection of our bot showing all its key components:</p> <p></p> <p>The chassis is built out of mild steel, and the whole bot weighs around 5 kg with the battery included. Most competitions allow a weight limit of 5 kg, but some permit up to 7 kg \u2014 in such cases, we can add additional weights.</p> <p>The key to building a good RoboSoccer bot is ensuring it's sturdy enough to withstand the beating from other heavy bots, while also having enough torque to push opponents. At the same time, it must be agile enough for precise control during fast-paced matches.</p>"},{"location":"robosoccer/bot/#components","title":"Components","text":""},{"location":"robosoccer/bot/#the-motor","title":"The Motor:","text":"<p>These are the most critical components of the bot, so finding the right motor for our use case was a challenging task \u2014 especially since it was our first time working with such motors.</p> <p>We did a bit of research on different motor types and their specifications. You can find a basic overview of motor fundamentals here.</p> <p>We eventually chose 12V 300 RPM planetary geared motors called IG32 from Rhino Motors. These offered the best value and performance in our budget range.</p> <p>This is an image of the motor we used:</p> <p></p> <p>Here are its dimensions:</p> <p></p> <p>And below are its detailed specifications:</p> Specification Details Type 12V DC Geared Motor with Metal Planetary Gearbox Base Motor RPM 18000 RPM Output RPM 300 RPM Gearbox Stages 3-stage planetary Rated Torque 10 kg\u00b7cm Stall Torque &gt; 40 kg\u00b7cm (use at rated torque for longevity) Shaft Type D-type Shaft Diameter 6 mm Shaft Length 16 mm total (12 mm D-shaped) Shaft Thread M3 threaded hole Back Shaft Length 9 mm Gearbox Diameter 32 mm Motor Diameter 28.5 mm Motor Length 70 mm (without shaft) Weight 300 g Supply Voltage 12V DC No-load Current 800 mA Load Current (Max) Up to 7.5 A Coupling Options CNC coupling (6 mm) or fixed coupling <p>You can buy these motors here</p>"}]}